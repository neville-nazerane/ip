
pool: hosted-linux

pr: none

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/Ip.Website
      - pipelines/website.yaml


parameters:

- name: projectPath
  type: string
  default: src/Ip.Website

- name: projectName
  type: string
  default: Ip.Website

- name: destDirectory
  type: string 
  default: /var/www/ip

- name: url
  type: string
  default: http://localhost:5075
  
- name: service
  type: object
  default:
    description: Internet Protocol
    identifier: ip
    name: kestrel-ip



stages:
  - stage: CI
    jobs:
      - job: Compile
        steps:

        - script: |
            dotnet publish ${{ parameters.projectPath }} -c release -o published
            mkdir -p compressed
            tar -czf compressed/${{ parameters.projectName }}.tar.gz -C published .
          displayName: Publishing web app

        - publish: compressed
          displayName: Publish for release
          artifact: published

  - stage: Deploy
    displayName: Deploy to VM

    jobs:
      - deployment: Deployment
        displayName: Deploy to Development VM
        environment:
          name: Development
          resourceType: VirtualMachine
          resourceName: Web Server
        strategy:
          runOnce:
            deploy:
              steps:
                
                - checkout: none

                - download: current
                  displayName: download published artifact
                  artifact: published

                - script: |
                    echo "$(serviceTemplate)" > $(Pipeline.Workspace)/published/linux.service
                  displayName: Generate service file

                - script: |
                    sudo rm -rf ${{ parameters.destDirectory }}
                    sudo mkdir -p ${{ parameters.destDirectory }}
                    sudo tar -xzf ${{ parameters.projectName }}.tar.gz -C ${{ parameters.destDirectory }}

                    sudo mv linux.service /etc/systemd/system/${{ parameters.service.name }}.service -f

                    sudo systemctl enable ${{ parameters.service.name }}.service 
                    sudo systemctl stop ${{ parameters.service.name }}.service 
                    sudo systemctl start ${{ parameters.service.name }}.service
  
                    rm -rf *
                  displayName: Updating website
                  workingDirectory: $(Pipeline.Workspace)/published
                  failOnStderr: true
      
                - task: DeleteFiles@1
                  displayName: Clean up
            